#+TITLE: Work Setup
#+AUTHOR: Gary Lomberg
#+STARTUP: overview

* ToC :toc:
- [[#general][general]]
- [[#package-management][package management]]
  - [[#elpaca][elpaca]]
- [[#packages][packages]]
- [[#themes][themes]]
- [[#custom-functions][custom functions]]
- [[#org-babel][org babel]]
- [[#org-shortcuts][org shortcuts]]
- [[#custom-key-bindings][custom key bindings]]

* general
#+begin_src emacs-lisp
  ;; general
  (define-key global-map "\C-x\C-u" 'undo)
  (add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-display-line-numbers-mode 1)
  (column-number-mode 1)

  (dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (blink-cursor-mode -1)
  (setq blink-cursor-blinks 3)
  (setq blink-cursor-interval 0.6)
  (set-face-attribute 'default nil :height 120)
  (hl-line-mode 1)
  (recentf-mode 1)
  (savehist-mode 1)
  (setq history-length 25)
  (save-place-mode 1)
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
  (set-fringe-mode 5)
  (menu-bar-mode -1)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; calendar
  (setq calendar-week-start-day 1)

  ;; documents
  (setq doc-view-resolution 300)
  (setq doc-view-continuous t)

  ;; diary
  (setq european-calendar-style 't)

  ;; text
  (setq-default tab-width 4)
  (setq-default indent-tab-mode nil)
  ;; (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
  (electric-pair-mode 1)
  ;; coding
  (global-font-lock-mode t)

  ;; transparency
  ;; (add-to-list 'load-path "~/.config/emacs/github_packs/i3-emacs")
  ;; (require 'i3)
  ;; (require 'i3-integration)
  (add-to-list 'default-frame-alist '(alpha-background . 50))

  ;; org agenda
  (setq org-agenda-files '("~/Documents/emacs/org_mode.org"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "IN PROGRESS(p)")))
  ;; anything before "|" are todo states and any after are active

  ;; research and apply org-agenda-custom-commands

  ;; (setq org-capture-templates
  ;;   `(("t" "Tasks / Projects")
  ;;     ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
  ;;          "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

  ;;     ("j" "Journal Entries")
  ;;     ("jj" "Journal" entry
  ;;          (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
  ;;          "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
  ;;          ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
  ;;          :clock-in :clock-resume
  ;;          :empty-lines 1)
  ;;     ("jm" "Meeting" entry
  ;;          (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
  ;;          "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
  ;;          :clock-in :clock-resume
  ;;          :empty-lines 1)

  ;;     ("w" "Workflows")
  ;;     ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
  ;;          "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

  ;;     ("m" "Metrics Capture")
  ;;     ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
  ;;      "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  ;; look into org habit

  (setq delete-by-moving-to-trash t)

  (setq all-the-icons-dired-monochrome nil)  
#+end_src

* package management

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)  
#+end_src

** elpaca 
#+begin_src emacs-lisp
  ;; (defvar elpaca-installer-version 0.6)
  ;; (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  ;; (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  ;; (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  ;; (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
  ;;                               :ref nil
  ;;                               :files (:defaults "elpaca-test.el" (:exclude "extensions"))
  ;;                               :build (:not elpaca--activate-package)))
  ;; (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
  ;;        (build (expand-file-name "elpaca/" elpaca-builds-directory))
  ;;        (order (cdr elpaca-order))
  ;;        (default-directory repo))
  ;;   (add-to-list 'load-path (if (file-exists-p build) build repo))
  ;;   (unless (file-exists-p repo)
  ;;     (make-directory repo t)
  ;;     (when (< emacs-major-version 28) (require 'subr-x))
  ;;     (condition-case-unless-debug err
  ;;         (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
  ;;                  ((zerop (call-process "git" nil buffer t "clone"
  ;;                                        (plist-get order :repo) repo)))
  ;;                  ((zerop (call-process "git" nil buffer t "checkout"
  ;;                                        (or (plist-get order :ref) "--"))))
  ;;                  (emacs (concat invocation-directory invocation-name))
  ;;                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
  ;;                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
  ;;                  ((require 'elpaca))
  ;;                  ((elpaca-generate-autoloads "elpaca" repo)))
  ;;             (progn (message "%s" (buffer-string)) (kill-buffer buffer))
  ;;           (error "%s" (with-current-buffer buffer (buffer-string))))
  ;;       ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  ;;   (unless (require 'elpaca-autoloads nil t)
  ;;     (require 'elpaca)
  ;;     (elpaca-generate-autoloads "elpaca" repo)
  ;;     (load "./elpaca-autoloads")))
  ;; (add-hook 'after-init-hook #'elpaca-process-queues)
  ;; (elpaca `(,@elpaca-order))  
  ;; (setq package-enable-at-startup nil)
#+end_src

* packages
#+begin_src emacs-lisp
    (use-package diminish)

    (use-package all-the-icons
      :ensure t
      :if (display-graphic-p))

    (use-package nerd-icons
      :ensure t)

    (use-package counsel
      :after ivy
      :bind  (("M-x" . counsel-M-x)
              ("C-x b" . counsel-ibuffer)
              ("C-x C-f" . counsel-find-file)
              :map minibuffer-local-map
              ("C-r" . 'counsel-minibuffer-history))
      :config
      (setq ivy-initial-inputs-alist nil))

    ;; use M-o to get further options whilst in mini buffer

    (use-package ivy
      :init (ivy-mode 1)
      :bind (;;("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)		 
             ("C-k" . ivy-previoys-line)
             :map ivy-switch-buffer-map		 
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :custom
      (setq ivy-count-format "(%d/%d) "))

    (use-package ivy-rich
      :after ivy
      :ensure t
      :init (ivy-rich-mode 1)
      :custom
      (ivy-virtual-abbreciate 'full
                              ivy-rich-switch-buffer-align-virtual-buffer t
                              ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))

    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :custom ((doom-modeline-height 15)))

    (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))


    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    (require 'org-tempo) ; <s TAB to start new source block

    (use-package sudo-edit)

    (use-package eshell-syntax-highlighting
      :after esh-mode
      :config
      (eshell-syntax-highlighting-global-mode +1))

    (use-package vterm
      :config
      (setq vterm-max-scrollback 5000))

    (use-package rainbow-mode
      :hook org-mode prog-mode)
    (use-package projectile
      :config (projectile-mode 1)
      :custom (projectile-completion-system 'ivy)
      :bind-keymap ("C-c p" . projectile-command-map))

    (use-package dashboard
      :ensure t
      :init
      (setq initial-buffer-choice 'dashboard-open)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-banner-logo-title "Welcome")
      (setq dashboard-startup-banner 'logo) ;; can use string pointing to logo file
      (setq dashboard-center-content t)
      (setq dashboard-items '((recents . 5)
                              (agenda . 5)
                              (bookmarks . 3)
                              (projects . 3)
                              (registers . 3)))
      ;; (dashboard-modify-heading-icons '((bookmarks . "book"))) ; (recents . "file-text")
      :config
      (dashboard-setup-startup-hook))

    (use-package flycheck
      :ensure t
      :defer t
      :diminish
      :init (global-flycheck-mode))

    ;; (use-package company
    ;;   :defer 2
    ;;   :diminish
    ;;   :custom
    ;;   (company-begin-commands '(self-insert-command))
    ;;   (command-idle-delay .1)
    ;;   (company-minimum-prefix-length 2)
    ;;   (company-show-numbers t)
    ;;   (company-tooltips-align-annotations 't)
    ;;   (global-company-mode t))

    (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind
      (:map company-active-map
            ("<tab>" . company-complete-selection))
      (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0)
      (company-show-numbers t))

    (use-package company-box
      :after company
      :diminish
      :hook (company-mode . company-box-mode))

    (use-package peep-dired
      :after dired)

    (use-package which-key
      :init (which-key-mode)
      :config (setq which-key-idle-delay 0.3))

    (use-package git-timemachine)

    (use-package magit)
    ;; use ? to get help commands

    (use-package rainbow-delimiters
      :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
             (org-mode . rainbow-delimiters-mode)
             (prog-mode . rainbow-delimiters-mode)
             (clojure-mode . rainbow-delimiters-mode)))

    (use-package tldr)

    (use-package helpful
      :commands (helpful-callable helpful-variable helpful-command helpful-key)
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))

    (use-package general)
    ;; research general for creating a place to set namespaced custom key bindings
    ;; using prefixes e.g. "C-SPACE"
    ;; also investigate hydra package

    (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "C-c l")
      :hook ((python-mode . lsp)
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)

    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))

    (use-package lsp-jedi
      :ensure t)

    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom(lsp-ui-doc-position 'bottom))

    (use-package lsp-ivy
      :after lsp)

    (use-package evil-nerd-commenter
      :bind ("M-/" . evilnc-comment-or-uncomment-lines))

    (use-package term
      :commands term
      :config
      (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
      ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

      ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
    ;; C-c C-j / C-c C-k to switch between line and care mode

    (use-package eterm-256color
      :hook (term-mode . eterm-256color-mode))

    (use-package vterm
      :commands vterm
      :config
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
      ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
      (setq vterm-max-scrollback 10000))

    ;; (use-package all-the-icons-dired
    ;;   :hook (dired-mode . all-the-icons-dired-mode))

    (use-package all-the-icons-dired
      :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

    (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom ((dired-listing-switches "-agho --group-directories-first")))


    (use-package dired-open
      :commands (dired dired-jump)
      :config
      ;; Doesn't work as expected!
      ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
      (setq dired-open-extensions '(("png" . "feh")
                                    ("mkv" . "mpv"))))

    (use-package emacsql)
    (use-package emacsql-sqlite)
    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename "~/Documents/org_roam"))
      (org-roam-completion-everywhere t)
      (org-roam-capture-templates
       '(("d" "default" plain
          "%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
          :unnarrowed t)
         ("l" "programming language" plain
          "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
          :unnarrowed t)
         ("b" "book notes" plain
          "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
          :unnarrowed t)
         ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
          :unnarrowed t)
         )
       )
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today)
             :map org-mode-map
             ("C-M-i" . completion-at-point))
      :config
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol))

#+end_src

* themes
#+begin_src emacs-lisp
    ;; (require 'modus-themes)
    ;; (load-theme 'modus-operandi t)
    ;; (setq modus-theme-mode-line '(borderless))
    ;; (setq modus-themes-region '(bg-only))
    ;; (load-theme 'modus-vivendi t)
    ;; (load-theme 'deeper-blue t)

    ;; (use-package timu-spacegrey-theme
    ;; :ensure t
    ;; :config
    ;; (load-theme 'timu-spacegrey t))

  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 (enable-theme 'ample))
    :defer t
    :ensure t)  
#+end_src

* custom functions
#+begin_src emacs-lisp
  ;; custom functions
  (defun count-words-buffer ()
	"Count the number of words in the current buffer;
  print a message in the minibuffer with the result."
	(interactive)
	(let ((count 0))
	  (save-excursion
		(goto-char (point-min))
		(while (< (point) (point-max))
		  (forward-word 1)
		  (setq count (1+ count)))
		(message "buffer conatains %d words." count))))

  (defun goto-percent (percent)
	(interactive "nGoto percent: ")
	(let* ((size (point-max))
		   (charpos (/ (* size percent) 100)))
	  (goto-char charpos)))

  (defun pluralize (word count &optional plural)
	(if (= count 1)
		word
	  (if (null plural)
		  (concat word "s")
		plural)))

  (defun how-many (count)
	(cond ((zerop count) "no")
		  ((= count 1) "one")
		  ((= count 2) "two")
		  (t "many")))

  (defun report-change-count (count)
	(message "Made %s %s" (how-many count) (pluralize "change" count)))  
#+end_src
* org babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t))))

#+end_src

* org shortcuts

shift-tab = toggle visibilities
C-return = new item at same level
M-arrows = move heading
C-c C-l = insert link
shift-arrows = cycle states

#+begin_src python :session

  def return_hello():
      return "hello"

  return_hello()

#+end_src

#+RESULTS:
: hello

* custom key bindings
#+begin_src emacs-lisp
  (defun test-command ()
    (interactive)
    (message "This is a test"))

  (defvar-keymap my-search-keys
    :doc "personal search utilities"
    "s" 'swiper
    )

  (defvar-keymap my-keys
    :doc "personally defined keymappings"
    "a" 'org-agenda
    "r" 'recentf-open-files
    "c" 'org-capture
    "s" my-search-keys
    "t" 'test-command ;; just to illustrate calling custom functions
    )

  (keymap-set global-map "C-c m" my-keys) ;; create new prefixed global map

  (which-key-add-keymap-based-replacements my-keys
    "s" `("Search" . ,my-search-keys))

#+end_src

